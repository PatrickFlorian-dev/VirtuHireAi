import { useMemo, useState } from "react";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import { ColDef, GridApi, GridOptions } from "ag-grid-community";

type DynamicAgGridProps<T> = {
  rowData: T[];
  columnDefs?: ColDef[];
  gridOptions?: GridOptions;
  title?: string;
  height?: string;
  enableExport?: boolean;
  onRowClick?: (row: T) => void;
};

export default function DynamicAgGrid<T extends { id?: number }>({
  rowData,
  columnDefs,
  gridOptions,
  title,
  height = "500px",
  enableExport = false,
  onRowClick,
}: DynamicAgGridProps<T>) {
  const [gridApi, setGridApi] = useState<GridApi | null>(null);

  const autoGeneratedCols: ColDef[] = useMemo(() => {
    if (columnDefs) return columnDefs;
    if (!rowData || rowData.length === 0) return [];

    return Object.keys(rowData[0]).map((key) => ({
      headerName: key.charAt(0).toUpperCase() + key.slice(1),
      field: key,
      sortable: true,
      filter: true,
      resizable: true,
    }));
  }, [rowData, columnDefs]);

  const defaultColDef: ColDef = {
    flex: 1,
    minWidth: 100,
    filter: true,
    sortable: true,
    resizable: true,
  };

  const handleExport = () => {
    if (gridApi) {
      gridApi.exportDataAsCsv();
    }
  };

  return (
    <div className="space-y-4">
      {title && <h2 className="text-xl font-bold">{title}</h2>}

      {/* Toolbar */}
      <div className="flex justify-between items-center mb-2">
        {enableExport && (
          <button
            onClick={handleExport}
            className="bg-blue-500 text-white px-4 py-1 rounded"
          >
            Export CSV
          </button>
        )}
      </div>

      <div
        className="ag-theme-alpine"
        style={{ width: "100%", height }}
      >
        <AgGridReact
          rowData={rowData}
          columnDefs={autoGeneratedCols}
          defaultColDef={{ ...defaultColDef, ...gridOptions?.defaultColDef }}
          pagination={true}
          paginationPageSize={gridOptions?.paginationPageSize || 10}
          onGridReady={(params) => {
            setGridApi(params.api);
            // If you need columnApi later:
            // const colApi = params.api.getColumnApi();
            // setColumnApi(colApi);
          }}
          onRowClicked={(e) => onRowClick && onRowClick(e.data)}
          {...gridOptions}
        />
      </div>

      {rowData.length === 0 && <p>No data found.</p>}
    </div>
  );
}
